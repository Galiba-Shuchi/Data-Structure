#include <stdio.h>
#include <stdlib.h>

// NODE STRUCTURE
struct Node {
    int data;
    struct Node *next;
};

struct Node *head = NULL; //LIST INITIAL

// NEW NODE FUNCTION
struct Node* createNode(int value) {
    struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

// INSERT IN FIRST
void insertAtBeginning(int value) {
    struct Node *newNode = createNode(value);
    newNode->next = head;
    head = newNode;
}

//INSERT IN LAST
void insertAtEnd(int value) {
    struct Node *newNode = createNode(value);
    if (head == NULL) {
        head = newNode;
        return;
    }
    struct Node *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

// ADD AFTER SPECIFIC NODE
void insertAfter(int target, int value) {
    struct Node *temp = head;
    while (temp != NULL && temp->data != target) {
        temp = temp->next;
    }
    if (temp == NULL) {
        printf("Target value %d পাওয়া যায়নি!\n", target);
        return;
    }
    struct Node *newNode = createNode(value);
    newNode->next = temp->next;
    temp->next = newNode;
}

// NODE DELETE
void deleteNode(int value) {
    if (head == NULL) {
        printf("EMPTY NODE\n");
        return;
    }
    struct Node *temp = head, *prev = NULL;

    // FIRST NODE DELETE
    if (temp != NULL && temp->data == value) {
        head = temp->next;
        free(temp);
        return;
    }

    // DELETE FROM ANYWHERE
    while (temp != NULL && temp->data != value) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Value %d NOT AVAILABLE!\n", value);
        return;
    }
    prev->next = temp->next;
    free(temp);
}

// VALUE SEARCH
void searchValue(int value) {
    struct Node *temp = head;
    int pos = 1;
    while (temp != NULL) {
        if (temp->data == value) {
            printf("Value %d POSITION: %d\n", value, pos);
            return;
        }
        temp = temp->next;
        pos++;
    }
    printf("Value %d NOT AVAULABLE IN LIST\n", value);
}

// LIST DISPLAY
void displayList() {
    if (head == NULL) {
        printf("LIST EMPTY!\n");
        return;
    }
    struct Node *temp = head;
    printf("Linked List: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// MAIN MENU
int main() {
    int choice, value, target;

    while (1) {
        printf("\n--- Singly Linked List Menu ---\n");
        printf("1. Insert at Beginning\n");
        printf("2. Insert at End\n");
        printf("3. Insert After Value\n");
        printf("4. Delete Node\n");
        printf("5. Search Value\n");
        printf("6. Display List\n");
        printf("7. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            printf("Value : ");
            scanf("%d", &value);
            insertAtBeginning(value);
            break;
        case 2:
            printf("Value : ");
            scanf("%d", &value);
            insertAtEnd(value);
            break;
        case 3:
            printf("TARGET VALUE: ");
            scanf("%d", &target);
            printf("নতুন ভ্যালু দিন: ");
            scanf("%d", &value);
            insertAfter(target, value);
            break;
        case 4:
            printf("DELET VALIUE: ");
            scanf("%d", &value);
            deleteNode(value);
            break;
        case 5:
            printf("SEARCH VALUE: ");
            scanf("%d", &value);
            searchValue(value);
            break;
        case 6:
            displayList();
            break;
        case 7:
            exit(0);
        default:
            printf("ভুল অপশন!\n");
        }
    }
    return 0;
}
